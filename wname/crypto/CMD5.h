#pragma once

_WNAME_BEGIN
namespace crypto
{
	class WNAME CMD5 final
	{
	#pragma region Private_Inner
	private:
	//==========================================================================
		typedef struct {
			/* state (ABCD) */
			DWORD state[4];
			/* number of bits, modulo 2^64 (lsb first) */
			DWORD count[2];
			/* input buffer */
			BYTE buffer[64];
		} MD5_CTX;
	//==========================================================================
	#pragma endregion

	#pragma region Public_Method
	public:
	//==========================================================================
		/**
		* конструктор по-умолчанию.
		*/
		CMD5() noexcept;
	//==========================================================================
		/**
		* конструктор из свертки.
		* @param hash - копируемые данные.
		*/
		CMD5(
			const BYTE* const hash) noexcept;
	//==========================================================================
		/**
		* конструктор копирования.
		* @param md5 - копируемый объект.
		*/
		CMD5(
			const CMD5& md5) noexcept;
	//==========================================================================
		/**
		* оператор перемещения.
		* @param md5 - перемещаемый объект.
		* @return - текущий объект.
		*/
		CMD5(
			CMD5&& md5) noexcept;
	//==========================================================================
		/**
		* добавить буфер.
		* @param input - входной буфер.
		* @param inputLen - размер буфера.
		*/
		void update(
			const BYTE* input,
			DWORD inputLen) noexcept;
	//==========================================================================
		/**
		* закончить работу со сверткой.
		* @return - указатель на свертку.
		*/
		const BYTE* const final() noexcept;
	//==========================================================================
		/**
		* очистка.
		*/
		void clear() noexcept;
	//==========================================================================
		/**
		* получить свертку.
		* @return - указатель на свертку.
		*/
		const BYTE* const getHash() const noexcept;
	//==========================================================================
		/**
		* оператор копирования.
		* @param md5 - копируемый объект.
		* @return - текущий объект.
		*/
		CMD5& operator=(
			const CMD5& md5) noexcept;
	//==========================================================================
		/**
		* оператор перемещения.
		* @param md5 - перемещаемый объект.
		* @return - текущий объект.
		*/
		CMD5& operator=(
			CMD5&& md5) noexcept;
	//==========================================================================
		/**
		* оператор сравнения.
		* @param md5 - объект.
		* @return - результат сравнения.
		*/
		bool operator==(
			const CMD5& md5) noexcept;
	//==========================================================================
		/**
		* оператор сравнение НЕ.
		* @param md5 - объект.
		* @return - результат сравнения.
		*/
		bool operator!=(
			const CMD5& md5) noexcept;
	//==========================================================================
		/**
		* деструктор.
		*/
		~CMD5() = default;
	//==========================================================================
	#pragma endregion

	#pragma region Private_Method
	private:
	//==========================================================================
		/**
		* преобразование.
		* @param state - состояние.
		* @param block - блок преобразования..
		*/
		static void transform(
			DWORD* state,
			const BYTE* const block) noexcept;
	//==========================================================================
		/**
		* зашифровать буфер.
		* @param output - выходной буфер.
		* @param input - входной буфер.
		* @param len - размер буферов.
		*/
		static void encode(
			BYTE* output,
			const DWORD* const input,
			const DWORD len) noexcept;
	//==========================================================================
		/**
		* расшифровать буфер.
		* @param output - выходной буфер.
		* @param input - входной буфер.
		* @param len - размер буферов.
		*/
		static void decode(
			DWORD* output,
			const BYTE* const input,
			const DWORD len) noexcept;
	//==========================================================================
	#pragma endregion

	#pragma region Private_Data
	private:
	//==========================================================================
		/** контекст свертки */
		MD5_CTX _ctx;

		/** свертка */
		BYTE _hash[16] = { 0 };
	//==========================================================================
	#pragma endregion
	};
}
_WNAME_END