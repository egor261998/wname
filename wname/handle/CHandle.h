#pragma once

_WNAME_BEGIN
namespace handle
{
	/** реализация описателя в классе */
	class CHandle
	{
	#pragma region Public_Method
	public:
	//==========================================================================
		/**
		* конструктор по умолчанию.
		*/
		WNAME CHandle() noexcept = default;
	//==========================================================================
		/**
		* конструктор из описателя.
		* @param hObject - новый описатель.
		*/
		WNAME CHandle(
			const HANDLE hObject);
	//==========================================================================
		/**
		* конструктор копирования.
		* @param handle - описатель копирования.
		*/
		WNAME CHandle(
			const CHandle& handle) noexcept;
	//==========================================================================
		/**
		* конструктор перемещения.
		* @param handle - описатель перемещения.
		*/
		WNAME CHandle(
			CHandle&& handle) noexcept;
	//==========================================================================
		/**
		* проверить валидность.
		* @return - результат проверки.
		*/
		WNAME bool isValid() const noexcept;
	//==========================================================================
		/**
		* проверить валидность.
		* @param hObject - описатель.
		* @return - результат проверки.
		*/
		WNAME static bool isValid(
			const HANDLE hObject) noexcept;
	//==========================================================================
		/**
		* получить описатель.
		* @return - описатель.
		*/
		WNAME HANDLE getHandle() const noexcept;
	//==========================================================================
		/**
		* закрыть описатель.
		*/
		WNAME void close() noexcept;
	//==========================================================================
		/**
		* оператор присвоения описателя.
		* @param hObject - новый описатель.
		* @return - текущий объект.
		*/
		WNAME virtual CHandle& operator=(
			const HANDLE hObject);
	//==========================================================================
		/**
		* оператор копирования описателя.
		* @param handle - копируемый объект.
		* @return - текущий объект.
		*/
		WNAME virtual CHandle& operator=(
			const CHandle& handle) noexcept;
	//==========================================================================
		/**
		* оператор перемещения описателя.
		* @param handle - перемещаемый объект.
		* @return - текущий объект.
		*/
		WNAME virtual CHandle& operator=(
			CHandle&& handle) noexcept;
	//==========================================================================
		/**
		* оператор получения описателя.
		* @return - описатель.
		*/
		WNAME operator HANDLE() const noexcept;
	//==========================================================================
		/**
		* деструктор.
		*/
		WNAME virtual ~CHandle();
	//==========================================================================
	#pragma endregion

	#pragma region Protected_Data
	protected:
	//==========================================================================
		/** описатель */
		std::shared_ptr<void> _pHandle;
	//==========================================================================
	#pragma endregion
	};
}
_WNAME_END